# -*- coding: utf-8 -*-
"""CIE-3

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aXGLlkpG2KCCVRxRSm4hDZcBunRT7wJN
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

df=pd.read_csv('/content/BostonHousing (1).csv')
df

df.head()

df.info()

df.isnull().sum

df.replace(np.nan,'0',inplace=True)
df.isnull().sum

df.describe()

df.columns

X = df[['crim']]
y = df['age']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = LinearRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print("Mean Squared Error:", mse)
print("R-squared:", r2)

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

df=pd.read_csv('/content/Iris.csv')
df

df.head()

df.info()

df.isnull().sum

df.replace(np.nan,'0',inplace=True)
df.isnull().sum

df.describe()

df.columns

import numpy as np
import pandas as pd
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

#load
iris = load_iris()
data = pd.DataFrame(data=np.c_[iris['data'], iris['target']], columns=iris['feature_names'] + ['target'])

#predict
X = data.drop(columns=['petal length (cm)'])
y = data['petal length (cm)']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

#splitting
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

#model
model = LinearRegression()
#fitting
model.fit(X_train, y_train)

#predict
y_pred = model.predict(X_test)

#evaluat
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error: {mse}')
print(f'R-squared (R2) Score: {r2}')